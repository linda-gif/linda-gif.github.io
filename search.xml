<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>循环队列</title>
      <link href="/2020/06/03/xun-huan-dui-lie/"/>
      <url>/2020/06/03/xun-huan-dui-lie/</url>
      
        <content type="html"><![CDATA[<p>直接上代码<br>实现语言为C语言</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> TRUE    1</span><span class="token macro property">#<span class="token directive keyword">define</span> FALSE   0</span><span class="token macro property">#<span class="token directive keyword">define</span> OK      1</span><span class="token macro property">#<span class="token directive keyword">define</span> ERROR   0</span><span class="token macro property">#<span class="token directive keyword">define</span> INFEASIBLE -1</span><span class="token macro property">#<span class="token directive keyword">define</span> OVERFLOW   -2</span><span class="token macro property">#<span class="token directive keyword">define</span> MAXSIZE    100</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> QElemType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> Status<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    QElemType <span class="token operator">*</span>base<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化的动态分配内存空间</span>    <span class="token keyword">int</span> Front<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//头指针</span>    <span class="token keyword">int</span> Rear<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//尾指针</span><span class="token punctuation">}</span>SqQueue<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 构造空队列</span>Status <span class="token function">InitQueue</span><span class="token punctuation">(</span>SqQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">)</span><span class="token punctuation">{</span>    Q<span class="token punctuation">.</span>base <span class="token operator">=</span> new QElemType<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 分配数组空间</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Q<span class="token punctuation">.</span>base<span class="token punctuation">)</span>     <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    Q<span class="token punctuation">.</span>Front <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 头指针 尾指针为0, 队列为空</span>    Q<span class="token punctuation">.</span>Rear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 销毁队列</span>Status <span class="token function">DestroyQueue</span><span class="token punctuation">(</span>SqQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Q<span class="token punctuation">.</span>base<span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    delete Q<span class="token punctuation">.</span>base<span class="token punctuation">;</span>    Q<span class="token punctuation">.</span>base <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 清空队列</span>Status <span class="token function">ClearQueue</span><span class="token punctuation">(</span>SqQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Q<span class="token punctuation">.</span>Front <span class="token operator">==</span> Q<span class="token punctuation">.</span>Rear<span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 已经是空表</span>    Q<span class="token punctuation">.</span>Rear <span class="token operator">=</span> Q<span class="token punctuation">.</span>Front<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 求队列长度</span><span class="token keyword">int</span> <span class="token function">QueueLength</span><span class="token punctuation">(</span>SqQueue Q<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>Rear<span class="token operator">-</span>Q<span class="token punctuation">.</span>Front<span class="token operator">+</span>MAXSIZE<span class="token punctuation">)</span><span class="token operator">%</span>MAXSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 用e返回Q的队头元素</span>Status <span class="token function">GetHead</span><span class="token punctuation">(</span>SqQueue Q<span class="token punctuation">,</span> QElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Q<span class="token punctuation">.</span>Front <span class="token operator">==</span> Q<span class="token punctuation">.</span>Rear<span class="token punctuation">)</span>        <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 队不能为空</span>    e <span class="token operator">=</span> Q<span class="token punctuation">.</span>base<span class="token punctuation">[</span>Q<span class="token punctuation">.</span>Front<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 返回队头指针元素, 队头指针不变</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 插入元素e为Q的队尾元素(入队)</span>Status <span class="token function">EnQueue</span><span class="token punctuation">(</span>SqQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">,</span> QElemType e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>Rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>MAXSIZE <span class="token operator">==</span> Q<span class="token punctuation">.</span>Front<span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 队满</span>    Q<span class="token punctuation">.</span>base<span class="token punctuation">[</span>Q<span class="token punctuation">.</span>Rear<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 新元素加入队尾</span>    Q<span class="token punctuation">.</span>Rear <span class="token operator">=</span> <span class="token punctuation">(</span>Q<span class="token punctuation">.</span>Rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>MAXSIZE<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 队尾指针+1</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 删除Q的队头元素，用e返回(出队)</span>Status <span class="token function">DeQueue</span><span class="token punctuation">(</span>SqQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">,</span> QElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Q<span class="token punctuation">.</span>Rear <span class="token operator">==</span> Q<span class="token punctuation">.</span>Front<span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 队空</span>    e <span class="token operator">=</span> Q<span class="token punctuation">.</span>base<span class="token punctuation">[</span>Q<span class="token punctuation">.</span>Front<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 保存队头元素</span>    Q<span class="token punctuation">.</span>Front <span class="token operator">=</span> <span class="token punctuation">(</span>Q<span class="token punctuation">.</span>Front<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>MAXSIZE<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 队头指针+1</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 遍历队列</span>Status <span class="token function">TraverseQueue</span><span class="token punctuation">(</span>SqQueue Q<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Q<span class="token punctuation">.</span>Front <span class="token operator">==</span> Q<span class="token punctuation">.</span>Rear<span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> Q<span class="token punctuation">.</span>Front<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">&lt;</span> Q<span class="token punctuation">.</span>Rear<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>Q<span class="token punctuation">.</span>base<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        temp<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    SqQueue Q<span class="token punctuation">;</span>    QElemType e<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">InitQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Initstack success\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//执行入栈操作</span>    e<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">;</span>    <span class="token function">EnQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    e<span class="token operator">=</span><span class="token number">22</span><span class="token punctuation">;</span>    <span class="token function">EnQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    e<span class="token operator">=</span><span class="token number">33</span><span class="token punctuation">;</span>    <span class="token function">EnQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the length of the queue is %d\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token function">QueueLength</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">GetHead</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the Gethead element is %d\n"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">DeQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the delete of the element is %d\n"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">TraverseQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">ClearQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"clear success!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">DestroyQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"destoryQueue success!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两数反转</title>
      <link href="/2020/05/30/liang-shu-fan-zhuan/"/>
      <url>/2020/05/30/liang-shu-fan-zhuan/</url>
      
        <content type="html"><![CDATA[<p>题目描述</p><p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</p><p>示例 1:</p><p>输入: 123<br>输出: 321<br> 示例 2:</p><p>输入: -123<br>输出: -321<br>示例 3:</p><p>输入: 120<br>输出: 21<br>注意:</p><p>假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231,  231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/reverse-integer" target="_blank" rel="noopener">https://leetcode-cn.com/problems/reverse-integer</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><p>`#include&lt;stdio.h&gt;`</p><p><code>int reverse(int x){</code></p><p>  <code>int digit=0;</code></p><p>  <code>int ret=0;</code></p><p>  <code>int flag;</code></p><p>  <code>flag=1;</code></p><p>  <code>if(x&lt;0)</code></p><p>  <code>{</code></p><p>​    <code>flag=-1;</code></p><p>​    <code>x=-x;</code></p><p>  <code>}</code></p><p>  <code>while(x&gt;0)</code></p><p>  <code>{</code></p><p>​    <code>digit=x%10;//得到最后一位数</code></p><p>​    <code>ret=ret*10+digit;</code></p><p>​    <code>x=x/10;</code></p><p>  <code>}</code></p><p>  <code>return flag*ret;</code></p><p><code>}</code></p><p><code>int main()</code></p><p><code>{</code></p><p>  <code>int x;</code></p><p> <code>// scanf("%d,&amp;x");</code></p><p>  <code>x=123;</code></p><p>  <code>int ret;</code></p><p>  <code>ret=0;</code></p><p>  <code>ret=reverse(x);</code></p><p>`` </p><p>  <code>printf("%d",ret);</code></p><p>  <code>return 0;</code></p><p><code>}</code></p><p>vscode上能运行出来，但是总归是不够完善</p><p>leetcode代码提交出现越界问题</p><p>下面参照别人的代码</p><p><code>int reverse(int x){</code></p><p>  <code>long temp,result=0;</code></p><p>  <code>if(x&gt;1534236461)</code> </p><p>  <code>return 0;</code></p><p>  <code>while(x){</code></p><p>​    <code>temp=x%10;</code></p><p>​    <code>x=x/10;</code></p><p>​    <code>result=result*10+temp;</code></p><p>  <code>}</code></p><p>  <code>if(result&gt;2147483642||result&lt;(-2147483641)) return 0;</code></p><p>  <code>return result;</code></p><p><code>}</code></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>顺序表</title>
      <link href="/2020/05/30/shunxubiao/"/>
      <url>/2020/05/30/shunxubiao/</url>
      
        <content type="html"><![CDATA[<p>实现代码为C语言，教材为清华大学严蔚敏版。</p><pre class=" language-c"><code class="language-c"> <span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span> <span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span> <span class="token macro property">#<span class="token directive keyword">define</span> OK 1</span> <span class="token macro property">#<span class="token directive keyword">define</span> ERROR 0</span> <span class="token macro property">#<span class="token directive keyword">define</span> MAXSIZE 100</span> <span class="token keyword">typedef</span> <span class="token keyword">int</span> Status<span class="token punctuation">;</span> <span class="token keyword">typedef</span> <span class="token keyword">int</span> ElemType<span class="token punctuation">;</span> <span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>     ElemType <span class="token operator">*</span>elem<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//*elem存储空间的基地址</span>     <span class="token keyword">int</span> length<span class="token punctuation">;</span> <span class="token punctuation">}</span>Sqlist<span class="token punctuation">;</span> Sqlist L<span class="token punctuation">;</span> Status <span class="token function">Initlist</span><span class="token punctuation">(</span>Sqlist <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//构造一个空的线性表</span> <span class="token punctuation">{</span>     L<span class="token punctuation">.</span>elem<span class="token operator">=</span>new ElemType<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">)</span>     <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>     L<span class="token punctuation">.</span>length<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> OK<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">int</span> <span class="token function">GetElem</span><span class="token punctuation">(</span>Sqlist L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>ElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">||</span>i<span class="token operator">></span>L<span class="token punctuation">.</span>length<span class="token punctuation">)</span>     <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>     e<span class="token operator">=</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第i-1个单元存储着第i个数据</span>     <span class="token keyword">return</span> OK<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//清空线性表</span> <span class="token keyword">int</span> <span class="token function">ClearList</span><span class="token punctuation">(</span>Sqlist <span class="token operator">&amp;</span>L<span class="token punctuation">)</span> <span class="token punctuation">{</span>     L<span class="token punctuation">.</span>length<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> OK<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//判断线性表是否为空</span><span class="token keyword">int</span> <span class="token function">IsEmpty</span><span class="token punctuation">(</span>Sqlist L<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//获取线性表的长度</span><span class="token keyword">int</span> <span class="token function">Getlength</span><span class="token punctuation">(</span>Sqlist L<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">DestoryList</span><span class="token punctuation">(</span>Sqlist <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">)</span>    delete L<span class="token punctuation">.</span>elem<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span>Status <span class="token function">locateElem</span><span class="token punctuation">(</span>Sqlist <span class="token operator">&amp;</span>L<span class="token punctuation">,</span>ElemType e <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>L<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>e<span class="token punctuation">)</span>        <span class="token keyword">return</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span><span class="token punctuation">}</span>Status <span class="token function">ListInsert</span><span class="token punctuation">(</span>Sqlist <span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>ElemType e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">||</span>i<span class="token operator">></span>L<span class="token punctuation">.</span>length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>length<span class="token operator">==</span>MAXSIZE<span class="token punctuation">)</span>    <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>L<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">;</span>j<span class="token operator">>=</span>i<span class="token number">-1</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">=</span>e<span class="token punctuation">;</span>    L<span class="token punctuation">.</span>length<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">ListDelete</span><span class="token punctuation">(</span>Sqlist <span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>i<span class="token operator">></span>L<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>L<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>     L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">=</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>     L<span class="token punctuation">.</span>length<span class="token operator">--</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//主函数测试</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">Initlist</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Initlist success!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>        ElemType e<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">ListInsert</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//测试InsertList函数</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Length is %d\n"</span><span class="token punctuation">,</span><span class="token function">Getlength</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">GetElem</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the first element %d\n"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"element is not exist\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">locateElem</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the element is locate at %d\n"</span><span class="token punctuation">,</span><span class="token function">locateElem</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the element is not exist"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">ListDelete</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"delect ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"List is empty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"list is not empty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">DestoryList</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"destory success\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">ClearList</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"clear success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/04/26/hello-world/"/>
      <url>/2020/04/26/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
