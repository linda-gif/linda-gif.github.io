<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>哈夫曼树的创建</title>
      <link href="/2020/07/30/ha-fu-man-shu-de-chuang-jian/"/>
      <url>/2020/07/30/ha-fu-man-shu-de-chuang-jian/</url>
      
        <content type="html"><![CDATA[<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> weight<span class="token punctuation">;</span>    <span class="token keyword">int</span> parent<span class="token punctuation">,</span>lc<span class="token punctuation">,</span>rc<span class="token punctuation">;</span><span class="token punctuation">}</span>HTNode<span class="token punctuation">,</span><span class="token operator">*</span>HuffmanTree<span class="token punctuation">;</span>HTNode HT<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> min<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用于存放最小值的下标</span>    <span class="token keyword">int</span> min_t<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用于存放最小值的权值</span>    min_t<span class="token operator">=</span>HT<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化权值weight的值</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>HT<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>parent<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//此时已经找出了第一个的最小值，while循环用于找第二个最小值</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        min_t<span class="token operator">=</span>HT<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token punctuation">;</span>        min<span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>HT<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token operator">&lt;</span>min_t<span class="token operator">&amp;&amp;</span>HT<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>parent<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            min_t<span class="token operator">=</span>HT<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token punctuation">;</span>            min<span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    HT<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">.</span>parent<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> min<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>min1<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>min2<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//指针变量做参数，形参变化影响实参</span><span class="token punctuation">{</span>    <span class="token operator">*</span>min1<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>min2<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>min2<span class="token operator">&lt;</span><span class="token operator">*</span>min1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//总之min1值一直是要小于min2的值</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> temp<span class="token punctuation">;</span>        temp<span class="token operator">=</span><span class="token operator">*</span>min1<span class="token punctuation">;</span>        <span class="token operator">*</span>min1<span class="token operator">=</span><span class="token operator">*</span>min2<span class="token punctuation">;</span>        <span class="token operator">*</span>min2<span class="token operator">=</span>temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">CreatHuffmanTree</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token number">-1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        HT<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>parent<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        HT<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>lc<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        HT<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>rc<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"please enter the weight of leaves\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>HT<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> s1<span class="token punctuation">,</span>s2<span class="token punctuation">;</span>        <span class="token function">select</span><span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>s1<span class="token punctuation">,</span><span class="token operator">&amp;</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>        HT<span class="token punctuation">[</span>s1<span class="token punctuation">]</span><span class="token punctuation">.</span>parent<span class="token operator">=</span>i<span class="token punctuation">;</span>        HT<span class="token punctuation">[</span>s2<span class="token punctuation">]</span><span class="token punctuation">.</span>parent<span class="token operator">=</span>i<span class="token punctuation">;</span>        HT<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>lc<span class="token operator">=</span>s1<span class="token punctuation">;</span>        HT<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>rc<span class="token operator">=</span>s2<span class="token punctuation">;</span>        HT<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token operator">=</span>HT<span class="token punctuation">[</span>s1<span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token operator">+</span>HT<span class="token punctuation">[</span>s2<span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"weight is %2d  parents is %2d ;children is %2d %2d\n"</span><span class="token punctuation">,</span>HT<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token punctuation">,</span>HT<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>parent<span class="token punctuation">,</span>HT<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>lc<span class="token punctuation">,</span>HT<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>rc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"(Where the node is 0 means there is no node.)\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please enter the number of leaves:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">CreatHuffmanTree</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">show</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行截图<br><img src="https://img-blog.csdnimg.cn/20200730085840167.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzIzMDk0,size_16,color_FFFFFF,t_70" alt="运行截图"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线索二叉树的实现</title>
      <link href="/2020/07/30/xian-suo-er-cha-shu-de-shi-xian/"/>
      <url>/2020/07/30/xian-suo-er-cha-shu-de-shi-xian/</url>
      
        <content type="html"><![CDATA[<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">char</span> ElemType<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 线索存储标志位</span><span class="token comment" spellcheck="true">// Link(0)：表示指向左右孩子的指针</span><span class="token comment" spellcheck="true">// Thread(1)：表示指向前驱后继的线索</span><span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token punctuation">{</span>Link<span class="token punctuation">,</span> Thread<span class="token punctuation">}</span> PointerTag<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义枚举类型</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> BiThrNode<span class="token punctuation">{</span>    <span class="token keyword">char</span> data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> BiThrNode <span class="token operator">*</span>lchild<span class="token punctuation">,</span> <span class="token operator">*</span>rchild<span class="token punctuation">;</span>    PointerTag ltag<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//标志左孩子（0）//标志前驱（1）</span>    PointerTag rtag<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//标志右孩子（0）//标志后继（1）</span><span class="token punctuation">}</span> BiThrNode<span class="token punctuation">,</span> <span class="token operator">*</span>BiThrTree<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 全局变量，始终指向刚刚访问过的结点</span>BiThrTree pre<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建一棵二叉树，约定用户遵照前序遍历的方式输入数据</span><span class="token keyword">void</span> <span class="token function">CreateBiThrTree</span><span class="token punctuation">(</span> BiThrTree <span class="token operator">*</span>T <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> c<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token string">'#'</span> <span class="token operator">==</span> c <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token operator">*</span>T <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token operator">*</span>T <span class="token operator">=</span> <span class="token punctuation">(</span>BiThrNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>BiThrNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>data <span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>ltag <span class="token operator">=</span> Link<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//默认是有左右孩子的</span>        <span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>rtag <span class="token operator">=</span> Link<span class="token punctuation">;</span>        <span class="token function">CreateBiThrTree</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">CreateBiThrTree</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 中序遍历线索化</span><span class="token keyword">void</span> <span class="token function">InThreading</span><span class="token punctuation">(</span>BiThrTree T<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> T <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">InThreading</span><span class="token punctuation">(</span> T<span class="token operator">-></span>lchild <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 递归左孩子线索化</span>        <span class="token comment" spellcheck="true">//结点处理，指向前驱后继</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span>T<span class="token operator">-></span>lchild <span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 如果该结点没有左孩子，设置ltag为Thread，并把lchild指向刚刚访问的结点。</span>        <span class="token punctuation">{</span>            T<span class="token operator">-></span>ltag <span class="token operator">=</span> Thread<span class="token punctuation">;</span>            T<span class="token operator">-></span>lchild <span class="token operator">=</span> pre<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指向前驱</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span>pre<span class="token operator">-></span>rchild <span class="token punctuation">)</span><span class="token comment" spellcheck="true">//指向后继，pre是刚刚访问过的点，只有访问过才知道有没有后继 很明显pre是T的前驱，那T是pre的后继</span>        <span class="token punctuation">{</span>            pre<span class="token operator">-></span>rtag <span class="token operator">=</span> Thread<span class="token punctuation">;</span>            pre<span class="token operator">-></span>rchild <span class="token operator">=</span> T<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        pre <span class="token operator">=</span> T<span class="token punctuation">;</span>        <span class="token function">InThreading</span><span class="token punctuation">(</span> T<span class="token operator">-></span>rchild <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 递归右孩子线索化</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">InOrderThreading</span><span class="token punctuation">(</span> BiThrTree <span class="token operator">*</span>p<span class="token punctuation">,</span> BiThrTree T <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//初始化一个头结点</span>    <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token punctuation">(</span>BiThrTree<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>BiThrNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>ltag <span class="token operator">=</span> Link<span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>rtag <span class="token operator">=</span> Thread<span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>rchild <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//右边是空树，指向自己</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span>T <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>lchild <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>lchild <span class="token operator">=</span> T<span class="token punctuation">;</span>        pre <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//给pre赋值</span>        <span class="token function">InThreading</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>        pre<span class="token operator">-></span>rchild <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// pre此时已经在最后一个结点了  做收尾工作</span>        pre<span class="token operator">-></span>rtag <span class="token operator">=</span> Thread<span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-></span>rchild <span class="token operator">=</span> pre<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span> <span class="token keyword">char</span> c <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 中序遍历二叉树，非递归</span><span class="token keyword">void</span> <span class="token function">InOrderTraverse</span><span class="token punctuation">(</span> BiThrTree T <span class="token punctuation">)</span><span class="token punctuation">{</span>    BiThrTree p<span class="token punctuation">;</span>    p <span class="token operator">=</span> T<span class="token operator">-></span>lchild<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> p <span class="token operator">!=</span> T <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span> p<span class="token operator">-></span>ltag <span class="token operator">==</span> Link <span class="token punctuation">)</span><span class="token comment" spellcheck="true">//有左孩子</span>        <span class="token punctuation">{</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>lchild<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//一直走 走到p没有左孩子  为了是走到最左边</span>        <span class="token punctuation">}</span>        <span class="token function">visit</span><span class="token punctuation">(</span>p<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span> p<span class="token operator">-></span>rtag <span class="token operator">==</span> Thread <span class="token operator">&amp;&amp;</span> p<span class="token operator">-></span>rchild <span class="token operator">!=</span> T <span class="token punctuation">)</span><span class="token comment" spellcheck="true">//p没有右孩子 知道最后一个元素 p->rchild!=T表示p不是最后一个元素</span>        <span class="token punctuation">{</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>rchild<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//p指向它的后继</span>            <span class="token function">visit</span><span class="token punctuation">(</span>p<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>rchild<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//收尾工作 p指回 头结点</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    BiThrTree P<span class="token punctuation">,</span> T <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token function">CreateBiThrTree</span><span class="token punctuation">(</span> <span class="token operator">&amp;</span>T <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">InOrderThreading</span><span class="token punctuation">(</span> <span class="token operator">&amp;</span>P<span class="token punctuation">,</span> T <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the result of the InorderThreading:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">InOrderTraverse</span><span class="token punctuation">(</span> P <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树的中序遍历非递归算法</title>
      <link href="/2020/07/17/er-cha-shu-de-zhong-xu-bian-li-fei-di-gui-suan-fa/"/>
      <url>/2020/07/17/er-cha-shu-de-zhong-xu-bian-li-fei-di-gui-suan-fa/</url>
      
        <content type="html"><![CDATA[<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> true 1</span><span class="token macro property">#<span class="token directive keyword">define</span> false 0</span><span class="token macro property">#<span class="token directive keyword">define</span> overFlow -2</span><span class="token macro property">#<span class="token directive keyword">define</span> MAXSIZE 100</span><span class="token macro property">#<span class="token directive keyword">define</span> OK 1</span><span class="token macro property">#<span class="token directive keyword">define</span> STACKINITSIZE 100</span><span class="token comment" spellcheck="true">//栈初始空间大小</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> Status<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义二叉树的结构</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> BiTNode<span class="token punctuation">{</span>    <span class="token keyword">char</span> data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> BiTNode <span class="token operator">*</span>lchild<span class="token punctuation">,</span><span class="token operator">*</span>rchild<span class="token punctuation">;</span><span class="token punctuation">}</span>BiTNode<span class="token punctuation">,</span><span class="token operator">*</span>BiTree<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义栈的结构</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    BiTNode <span class="token operator">*</span>base<span class="token punctuation">;</span>    BiTNode <span class="token operator">*</span>top<span class="token punctuation">;</span>    <span class="token keyword">int</span> stacksize<span class="token punctuation">;</span><span class="token punctuation">}</span>Sqstack<span class="token punctuation">;</span>Status <span class="token function">InitStack</span><span class="token punctuation">(</span>Sqstack <span class="token operator">&amp;</span>S<span class="token punctuation">)</span><span class="token punctuation">{</span>    S<span class="token punctuation">.</span>base<span class="token operator">=</span>new BiTNode<span class="token punctuation">[</span>STACKINITSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>S<span class="token punctuation">.</span>base<span class="token punctuation">)</span>    <span class="token function">exit</span> <span class="token punctuation">(</span>overFlow<span class="token punctuation">)</span><span class="token punctuation">;</span>    S<span class="token punctuation">.</span>top<span class="token operator">=</span>S<span class="token punctuation">.</span>base<span class="token punctuation">;</span>    S<span class="token punctuation">.</span>stacksize<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span>Status <span class="token function">StackEmpty</span><span class="token punctuation">(</span>Sqstack <span class="token operator">&amp;</span>S<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span>top<span class="token operator">==</span>S<span class="token punctuation">.</span>base<span class="token punctuation">)</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token keyword">else</span>     <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">}</span>Status <span class="token function">Pop</span><span class="token punctuation">(</span>Sqstack <span class="token operator">&amp;</span>S<span class="token punctuation">,</span> BiTNode <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span>top<span class="token operator">==</span>S<span class="token punctuation">.</span>base<span class="token punctuation">)</span>    <span class="token keyword">return</span> false<span class="token punctuation">;</span>    S<span class="token punctuation">.</span>top<span class="token operator">--</span><span class="token punctuation">;</span>    e <span class="token operator">=</span> <span class="token operator">*</span>S<span class="token punctuation">.</span>top<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span>Status <span class="token function">Push</span><span class="token punctuation">(</span>Sqstack <span class="token operator">&amp;</span>S<span class="token punctuation">,</span> BiTNode <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span>top<span class="token operator">-</span>S<span class="token punctuation">.</span>base<span class="token operator">==</span>S<span class="token punctuation">.</span>stacksize<span class="token punctuation">)</span>    <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token operator">*</span>S<span class="token punctuation">.</span>top<span class="token operator">=</span>e<span class="token punctuation">;</span>    S<span class="token punctuation">.</span>top<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">CreateBiTree</span><span class="token punctuation">(</span>BiTree <span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">'#'</span><span class="token punctuation">)</span>    T<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        T<span class="token operator">=</span>new BiTNode<span class="token punctuation">;</span>        T<span class="token operator">-></span>data<span class="token operator">=</span>ch<span class="token punctuation">;</span>        <span class="token function">CreateBiTree</span><span class="token punctuation">(</span>T<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">CreateBiTree</span><span class="token punctuation">(</span>T<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">InOrderTraverse</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">)</span><span class="token punctuation">{</span>    Sqstack S<span class="token punctuation">;</span>    BiTree p<span class="token punctuation">;</span>    p<span class="token operator">=</span>T<span class="token punctuation">;</span>    BiTree q<span class="token punctuation">;</span>    <span class="token function">InitStack</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">||</span><span class="token operator">!</span><span class="token function">StackEmpty</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">Push</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token operator">=</span>p<span class="token operator">-></span>lchild<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>           <span class="token function">Pop</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span><span class="token operator">*</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span>q<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>           p<span class="token operator">=</span>q<span class="token operator">-></span>rchild<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    BiTree T <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"please enter the binary tree\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">CreateBiTree</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the result of InOrderTraverse\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">InOrderTraverse</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行截图<br><img src="https://img-blog.csdnimg.cn/20200717223125874.png" alt="运行结果"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树递归的各种应用</title>
      <link href="/2020/07/16/er-cha-shu-di-gui-de-ge-chong-ying-yong/"/>
      <url>/2020/07/16/er-cha-shu-di-gui-de-ge-chong-ying-yong/</url>
      
        <content type="html"><![CDATA[<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdbool.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> MAXSIZE 100</span><span class="token comment" spellcheck="true">/**二叉树数据结构定义**/</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> BiTreeNode<span class="token punctuation">{</span>    <span class="token keyword">char</span> data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> BiTreeNode <span class="token operator">*</span>left<span class="token punctuation">;</span>    <span class="token keyword">struct</span> BiTreeNode <span class="token operator">*</span>right<span class="token punctuation">;</span><span class="token punctuation">}</span>BiTreeNode<span class="token punctuation">,</span><span class="token operator">*</span>BiTree<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**二叉树的建立--按照先序方式建立--插入**/</span><span class="token keyword">void</span> <span class="token function">CreateBiTree</span><span class="token punctuation">(</span>BiTree <span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> val<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>val <span class="token operator">==</span> <span class="token string">'#'</span><span class="token punctuation">)</span>        <span class="token operator">*</span>T <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//null表示为空枝</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token operator">*</span>T <span class="token operator">=</span> <span class="token punctuation">(</span>BiTree<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>BiTreeNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>data <span class="token operator">=</span> val<span class="token punctuation">;</span>        <span class="token function">CreateBiTree</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">CreateBiTree</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**先序遍历  根左右**/</span><span class="token keyword">void</span> <span class="token function">PreOrderTravel</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span>T<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">PreOrderTravel</span><span class="token punctuation">(</span>T<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">PreOrderTravel</span><span class="token punctuation">(</span>T<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**中序遍历 左根右**/</span><span class="token keyword">void</span> <span class="token function">InOrderTravel</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">InOrderTravel</span><span class="token punctuation">(</span>T<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span>T<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">InOrderTravel</span><span class="token punctuation">(</span>T<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**后序遍历 左右根**/</span><span class="token keyword">void</span> <span class="token function">TailOrderTravel</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">TailOrderTravel</span><span class="token punctuation">(</span>T<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TailOrderTravel</span><span class="token punctuation">(</span>T<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span>T<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">int</span> <span class="token function">Copy</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">,</span>BiTree <span class="token operator">&amp;</span>NewT<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">else</span><span class="token punctuation">{</span>         NewT <span class="token operator">=</span> new BiTreeNode<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//开辟一块BiNode类型的空间</span>         NewT<span class="token operator">-></span>data <span class="token operator">=</span> T<span class="token operator">-></span>data<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//赋值</span>         <span class="token function">Copy</span><span class="token punctuation">(</span>T<span class="token operator">-></span>left<span class="token punctuation">,</span>NewT<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">Copy</span><span class="token punctuation">(</span>T<span class="token operator">-></span>right<span class="token punctuation">,</span>NewT<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span>T<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">int</span> <span class="token function">Depth</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//空树返回0</span>     <span class="token keyword">else</span><span class="token punctuation">{</span>         <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token function">Depth</span><span class="token punctuation">(</span>T<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token function">Depth</span><span class="token punctuation">(</span>T<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token operator">></span>n<span class="token punctuation">)</span>    <span class="token keyword">return</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>         <span class="token keyword">else</span>    <span class="token keyword">return</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">int</span> <span class="token function">NodeCount</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token function">NodeCount</span><span class="token punctuation">(</span>T<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">NodeCount</span><span class="token punctuation">(</span>T<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//n = L+R+D;</span> <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">LeadCount</span><span class="token punctuation">(</span>BiTree T<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>         <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token operator">-></span>left<span class="token operator">==</span><span class="token constant">NULL</span><span class="token operator">&amp;&amp;</span>T<span class="token operator">-></span>right<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>     <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token keyword">else</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token function">LeadCount</span><span class="token punctuation">(</span>T<span class="token operator">-></span>left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">LeadCount</span><span class="token punctuation">(</span>T<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the test code\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BiTree T<span class="token punctuation">;</span>    BiTree NewT<span class="token punctuation">;</span>    <span class="token keyword">int</span> m<span class="token punctuation">,</span>n<span class="token punctuation">,</span>d<span class="token punctuation">;</span>    T <span class="token operator">=</span> <span class="token punctuation">(</span>BiTree<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>BiTreeNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"please enter the node:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">CreateBiTree</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the preOrderTravel: \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">PreOrderTravel</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the InOrderTravel: \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">InOrderTravel</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the TailOrderTravel: \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TailOrderTravel</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the copytree: \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Copy</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span>NewT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the depth: \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    n<span class="token operator">=</span><span class="token function">Depth</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the NodeCount: \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    d<span class="token operator">=</span><span class="token function">NodeCount</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the LeadCount: \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m<span class="token operator">=</span><span class="token function">LeadCount</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行结果<br><img src="https://img-blog.csdnimg.cn/20200716222907856.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzIzMDk0,size_16,color_FFFFFF,t_70" alt="运行代码"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两数相加</title>
      <link href="/2020/06/28/liang-shu-xiang-jia/"/>
      <url>/2020/06/28/liang-shu-xiang-jia/</url>
      
        <content type="html"><![CDATA[<p>给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。</p><p>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p><p>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><p>示例：</p><p>输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br>输出：7 -&gt; 0 -&gt; 8<br>原因：342 + 465 = 807</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/add-two-numbers" target="_blank" rel="noopener">https://leetcode-cn.com/problems/add-two-numbers</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> true 1</span><span class="token macro property">#<span class="token directive keyword">define</span> false 0</span><span class="token macro property">#<span class="token directive keyword">define</span> overFlow -2</span><span class="token macro property">#<span class="token directive keyword">define</span> MAXSIZE 100</span><span class="token macro property">#<span class="token directive keyword">define</span> OK 1</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> ListNode<span class="token punctuation">{</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>    <span class="token keyword">struct</span> ListNode <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span>ListNode<span class="token punctuation">,</span><span class="token operator">*</span>linklist<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//结点定义</span>linklist L<span class="token punctuation">;</span><span class="token keyword">struct</span> ListNode<span class="token operator">*</span> <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span><span class="token keyword">struct</span> ListNode<span class="token operator">*</span> l1<span class="token punctuation">,</span> <span class="token keyword">struct</span> ListNode<span class="token operator">*</span> l2<span class="token punctuation">)</span><span class="token punctuation">{</span>    linklist L<span class="token punctuation">,</span>r<span class="token punctuation">;</span>    L<span class="token operator">=</span>new ListNode<span class="token punctuation">;</span>    L<span class="token operator">-></span>val <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    L<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    r <span class="token operator">=</span> L<span class="token punctuation">;</span>    <span class="token keyword">int</span> carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>l1 <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">||</span> l2 <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token punctuation">(</span>l1 <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span><span class="token punctuation">:</span>l1<span class="token operator">-></span>val<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//两个链表有谁到尾巴了就取0与别的数加</span>        <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token punctuation">(</span>l2 <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span><span class="token punctuation">:</span>l2<span class="token operator">-></span>val<span class="token punctuation">;</span>        sum <span class="token operator">=</span> x <span class="token operator">+</span> y <span class="token operator">+</span> carry<span class="token punctuation">;</span>        carry <span class="token operator">=</span> sum <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>        linklist p<span class="token punctuation">;</span>        p<span class="token operator">=</span>new ListNode<span class="token punctuation">;</span>        p<span class="token operator">-></span>val <span class="token operator">=</span> sum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>        p<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        r<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>        r <span class="token operator">=</span> p<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l1 <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            l1 <span class="token operator">=</span> l1<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l2 <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            l2 <span class="token operator">=</span> l2<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>carry <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">struct</span> ListNode<span class="token operator">*</span> ca <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> ListNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> ListNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ca<span class="token operator">-></span>val <span class="token operator">=</span> carry<span class="token punctuation">;</span>        ca<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        r<span class="token operator">-></span>next <span class="token operator">=</span> ca<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> L<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token punctuation">}</span>ListNode <span class="token operator">*</span><span class="token function">create</span><span class="token punctuation">(</span>linklist <span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"please enter the number of Lnode:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    ListNode <span class="token operator">*</span>p<span class="token punctuation">;</span>    linklist r<span class="token punctuation">;</span>    L<span class="token operator">=</span>new ListNode<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>L<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    L<span class="token operator">-></span>next<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    r<span class="token operator">=</span>L<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>       p<span class="token operator">=</span>new ListNode<span class="token punctuation">;</span>       <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>p<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>       r<span class="token operator">-></span>next<span class="token operator">=</span>p<span class="token punctuation">;</span>       r<span class="token operator">=</span>p<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    r<span class="token operator">-></span>next<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> L<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">struct</span> ListNode <span class="token operator">*</span>L<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//输出函数</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>L <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>L<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        L <span class="token operator">=</span> L<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">struct</span> ListNode <span class="token operator">*</span>l1<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//地址</span>    <span class="token keyword">struct</span> ListNode <span class="token operator">*</span>l2<span class="token punctuation">;</span>    <span class="token keyword">struct</span> ListNode <span class="token operator">*</span>result<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建尾插法创建无头节点单链表</span>    l1<span class="token operator">=</span><span class="token function">create</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    l2<span class="token operator">=</span><span class="token function">create</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//调用输出链表的函数</span>    <span class="token function">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">print</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    result<span class="token operator">=</span><span class="token function">addTwoNumbers</span><span class="token punctuation">(</span> l1<span class="token punctuation">,</span>  l2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200628225633965.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzIzMDk0,size_16,color_FFFFFF,t_70" alt="运行代码如下"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KMP算法</title>
      <link href="/2020/06/18/kmpp-suan-fa/"/>
      <url>/2020/06/18/kmpp-suan-fa/</url>
      
        <content type="html"><![CDATA[<p>// KMP算法</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">void</span> <span class="token function">get_next</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>T<span class="token punctuation">,</span><span class="token keyword">int</span> next<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//修正前的next数组 </span>  <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    next<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    next<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">||</span>T<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>T<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token operator">++</span>i<span class="token punctuation">;</span>    <span class="token operator">++</span>j<span class="token punctuation">;</span>   next<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">else</span> j <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">void</span> <span class="token function">get_nextval</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>T<span class="token punctuation">,</span><span class="token keyword">int</span> nextval<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//修正后的nextval数组</span><span class="token punctuation">{</span>   <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   nextval<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>   nextval<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">||</span>T<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>T<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>     <span class="token operator">++</span>i<span class="token punctuation">;</span>     <span class="token operator">++</span>j<span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>T<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>      nextval<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>    <span class="token keyword">else</span> nextval<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nextval<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token keyword">else</span> j <span class="token operator">=</span> nextval<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">int</span> <span class="token function">Index_kmp</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>S<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>T<span class="token punctuation">,</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span><span class="token keyword">int</span> next<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//逐项比较 </span><span class="token punctuation">{</span>   <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>i <span class="token operator">=</span> pos<span class="token punctuation">,</span>len1<span class="token operator">=</span><span class="token function">strlen</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">,</span>len2<span class="token operator">=</span><span class="token function">strlen</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">get_next</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>len1<span class="token operator">&amp;&amp;</span>j<span class="token operator">&lt;</span>len2<span class="token punctuation">)</span>   <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>T<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">||</span>j<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>    i<span class="token operator">++</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>    <span class="token keyword">else</span> j <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">>=</span>len2<span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token operator">-</span>len2<span class="token punctuation">;</span>   <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">char</span> <span class="token operator">*</span>S<span class="token operator">=</span><span class="token string">"aab"</span><span class="token punctuation">,</span><span class="token operator">*</span>T<span class="token operator">=</span><span class="token string">"ab"</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> m<span class="token punctuation">;</span>   <span class="token keyword">int</span> <span class="token operator">*</span>next <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//修正前的next数组</span>   <span class="token keyword">int</span> <span class="token operator">*</span>nextval <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//修正后的nextval数组</span>   <span class="token function">get_next</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"nextarray:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span>m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>m<span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>next<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token function">get_nextval</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span>nextval<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n nextvalue:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span>m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>m<span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>nextval<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token function">Index_kmp</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>T<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>nextval<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n not match！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">else</span>   <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n at the %d match\n"</span><span class="token punctuation">,</span>t<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200618180211318.png" alt="运行代码如下"></p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">get_next</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>T<span class="token punctuation">,</span><span class="token keyword">int</span> next<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//修正前的next数组 </span>  <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//i是后缀，j是前缀，i比j大</span>    next<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    next<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">0</span><span class="token operator">||</span>T<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>T<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//i的值为3,j的是1  j=0,从第一个进去  </span>    <span class="token punctuation">{</span>     <span class="token operator">++</span>i<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//i的值为4</span>     <span class="token operator">++</span>j<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//j的值为2</span>     next<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//next[i]的值为2</span>   <span class="token punctuation">}</span>     <span class="token keyword">else</span> j <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//回溯 在4这里失配，找4的next的值，next[4]=2,把2对应的下标又是4，j等于4</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><p>next数组详解<br><img src="https://img-blog.csdnimg.cn/20200618180523284.png" alt="字串T"></p><p><img src="https://img-blog.csdnimg.cn/20200618182855302.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzIzMDk0,size_16,color_FFFFFF,t_70" alt="从相等的时候推下来"></p><p><img src="https://img-blog.csdnimg.cn/20200618183631381.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzIzMDk0,size_16,color_FFFFFF,t_70" alt="j=0开始推"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BF算法</title>
      <link href="/2020/06/18/bf-suan-fa/"/>
      <url>/2020/06/18/bf-suan-fa/</url>
      
        <content type="html"><![CDATA[<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> MAXSIZE 255</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token comment" spellcheck="true">//定于串的结构体类型 </span><span class="token punctuation">{</span>    <span class="token keyword">char</span> string<span class="token punctuation">[</span>MAXSIZE<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> length<span class="token punctuation">;</span><span class="token punctuation">}</span>SString<span class="token punctuation">;</span>SString S<span class="token punctuation">,</span>T<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">indexBF</span><span class="token punctuation">(</span>SString S<span class="token punctuation">,</span>SString T<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>S<span class="token punctuation">.</span>length<span class="token operator">&amp;&amp;</span>j<span class="token operator">&lt;=</span>T<span class="token punctuation">.</span>length<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span>string<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>T<span class="token punctuation">.</span>string<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//当匹配成功时 </span>        <span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            i<span class="token operator">=</span>i<span class="token operator">-</span>j<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当匹配不成功时，i回到上次匹配的下一个位置 </span>            j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//j回溯到第一个位置 </span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">></span>T<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//匹配成功，返回子串匹配的第一个字符在主串的位置 </span>    <span class="token punctuation">{</span>    <span class="token keyword">return</span> i<span class="token operator">-</span>T<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">print</span><span class="token punctuation">(</span>SString <span class="token operator">&amp;</span>S<span class="token punctuation">,</span>SString <span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">{</span>    S<span class="token punctuation">.</span>length<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    T<span class="token punctuation">.</span>length<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"please enter the string and substring: \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>S<span class="token punctuation">.</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>T<span class="token punctuation">.</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>    S<span class="token punctuation">.</span>length<span class="token operator">=</span><span class="token function">strlen</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>    T<span class="token punctuation">.</span>length<span class="token operator">=</span><span class="token function">strlen</span><span class="token punctuation">(</span>T<span class="token punctuation">.</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">indexBF</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the location of the substring: %d\n"</span><span class="token punctuation">,</span><span class="token function">indexBF</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"can not match!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>顺序栈的实现</title>
      <link href="/2020/06/06/shun-xu-zhan-de-shi-xian/"/>
      <url>/2020/06/06/shun-xu-zhan-de-shi-xian/</url>
      
        <content type="html"><![CDATA[<p>直接上代码</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> true 1</span><span class="token macro property">#<span class="token directive keyword">define</span> false 0</span><span class="token macro property">#<span class="token directive keyword">define</span> overFlow -2</span><span class="token macro property">#<span class="token directive keyword">define</span> MAXSIZE 100</span><span class="token macro property">#<span class="token directive keyword">define</span> OK 1</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> Status<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> SElemType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    SElemType <span class="token operator">*</span>base<span class="token punctuation">;</span>    SElemType <span class="token operator">*</span>top<span class="token punctuation">;</span>    <span class="token keyword">int</span> stacksize<span class="token punctuation">;</span><span class="token punctuation">}</span>Sqstack<span class="token punctuation">;</span>Status <span class="token function">InitStack</span><span class="token punctuation">(</span>Sqstack <span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//顺序栈的初始化</span><span class="token punctuation">{</span>    s<span class="token punctuation">.</span>base<span class="token operator">=</span>new SElemType<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span>base<span class="token punctuation">)</span>    <span class="token function">exit</span><span class="token punctuation">(</span>overFlow<span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token punctuation">.</span>top<span class="token operator">=</span>s<span class="token punctuation">.</span>base<span class="token punctuation">;</span>    s<span class="token punctuation">.</span>stacksize<span class="token operator">=</span>MAXSIZE<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//判断是否为非空栈</span>Status <span class="token function">StackEmpty</span><span class="token punctuation">(</span>Sqstack <span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>top<span class="token operator">==</span>s<span class="token punctuation">.</span>base<span class="token punctuation">)</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//销毁顺序栈</span>Status <span class="token function">DestoryStack</span><span class="token punctuation">(</span>Sqstack <span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>base<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        delete s<span class="token punctuation">.</span>base<span class="token punctuation">;</span>        s<span class="token punctuation">.</span>stacksize<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span>base<span class="token operator">=</span>s<span class="token punctuation">.</span>top<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">Stacklength</span><span class="token punctuation">(</span>Sqstack s<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> s<span class="token punctuation">.</span>top<span class="token operator">-</span>s<span class="token punctuation">.</span>base<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//清空顺序栈</span>Status <span class="token function">clearStack</span><span class="token punctuation">(</span>Sqstack s<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>base<span class="token punctuation">)</span>    s<span class="token punctuation">.</span>top<span class="token operator">=</span>s<span class="token punctuation">.</span>base<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//顺序栈入栈</span>Status <span class="token function">Push</span><span class="token punctuation">(</span>Sqstack <span class="token operator">&amp;</span>s<span class="token punctuation">,</span>SElemType e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>top<span class="token operator">-</span>s<span class="token punctuation">.</span>base<span class="token operator">==</span>s<span class="token punctuation">.</span>stacksize<span class="token punctuation">)</span>    <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token operator">*</span>s<span class="token punctuation">.</span>top<span class="token operator">=</span>e<span class="token punctuation">;</span>    s<span class="token punctuation">.</span>top<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//顺序栈出栈</span> Status <span class="token function">PoP</span><span class="token punctuation">(</span>Sqstack <span class="token operator">&amp;</span>s<span class="token punctuation">,</span>SElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>top<span class="token operator">==</span>s<span class="token punctuation">.</span>base<span class="token punctuation">)</span>     <span class="token keyword">return</span> false<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// --s.top;</span>     <span class="token comment" spellcheck="true">// e=*s.top;</span>     e<span class="token operator">=</span><span class="token operator">*</span><span class="token operator">--</span>s<span class="token punctuation">.</span>top<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Sqstack s<span class="token punctuation">;</span>    SElemType e<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">InitStack</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Initstack success\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//执行入栈操作</span>    e<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">;</span>    <span class="token function">Push</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    e<span class="token operator">=</span><span class="token number">22</span><span class="token punctuation">;</span>    <span class="token function">Push</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    e<span class="token operator">=</span><span class="token number">33</span><span class="token punctuation">;</span>    <span class="token function">Push</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">StackEmpty</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"empty stack\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">else</span>   <span class="token punctuation">{</span>       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"stack is not empty\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the length of the stack is %d\n"</span><span class="token punctuation">,</span><span class="token function">Stacklength</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">PoP</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the pop element is %d\n"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">clearStack</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"clear success!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">DestoryStack</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"destoryStack success!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200606230026863.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzIzMDk0,size_16,color_FFFFFF,t_70" alt="运行代码"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>顺序存储的多项式合并</title>
      <link href="/2020/06/06/shun-xu-cun-chu-de-duo-xiang-shi-he-bing/"/>
      <url>/2020/06/06/shun-xu-cun-chu-de-duo-xiang-shi-he-bing/</url>
      
        <content type="html"><![CDATA[<p>采用顺序存储的方式，实现语言为c++</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span>  polynomial<span class="token punctuation">{</span>    <span class="token keyword">int</span> factor<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//系数</span>    <span class="token keyword">int</span> indice<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指数</span>    <span class="token keyword">struct</span> polynomial <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span>polynomial<span class="token punctuation">,</span><span class="token operator">*</span>LinkList<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//尾插法--带头结点</span><span class="token keyword">void</span> <span class="token function">CreateLink</span><span class="token punctuation">(</span>LinkList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    LinkList p<span class="token punctuation">,</span>s<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// L = (LinkList)malloc(sizeof(polynomial));</span>    L<span class="token operator">=</span><span class="token keyword">new</span> polynomial<span class="token punctuation">;</span>    L<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    p <span class="token operator">=</span> L<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// s = (LinkList)malloc(sizeof(polynomial));</span>        s<span class="token operator">=</span><span class="token keyword">new</span> polynomial<span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"enter the polynomial expo and coef in turn:"</span><span class="token punctuation">;</span>        cin<span class="token operator">>></span>s<span class="token operator">-</span><span class="token operator">></span>factor<span class="token operator">>></span>s<span class="token operator">-</span><span class="token operator">></span>indice<span class="token punctuation">;</span>        s<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        p<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> s<span class="token punctuation">;</span>        p <span class="token operator">=</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">AddList</span><span class="token punctuation">(</span>LinkList List1<span class="token punctuation">,</span> LinkList List2<span class="token punctuation">,</span> LinkList <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>    LinkList p1<span class="token punctuation">,</span>p2<span class="token punctuation">,</span>list<span class="token punctuation">,</span>s<span class="token punctuation">;</span>    L <span class="token operator">=</span> <span class="token punctuation">(</span>LinkList<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>polynomial<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    L<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    list <span class="token operator">=</span> L<span class="token punctuation">;</span>    p1 <span class="token operator">=</span> List1<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>    p2 <span class="token operator">=</span> List2<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p1 <span class="token operator">&amp;&amp;</span> p2<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p1<span class="token operator">-</span><span class="token operator">></span>indice <span class="token operator">&lt;</span> p2<span class="token operator">-</span><span class="token operator">></span>indice<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            s <span class="token operator">=</span> p1<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//s存的是最初的p1</span>            list<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> p1<span class="token punctuation">;</span>            list <span class="token operator">=</span> p1<span class="token punctuation">;</span>            list<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>            p1 <span class="token operator">=</span> s<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p1<span class="token operator">-</span><span class="token operator">></span>indice <span class="token operator">==</span> p2<span class="token operator">-</span><span class="token operator">></span>indice<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            p1<span class="token operator">-</span><span class="token operator">></span>factor <span class="token operator">=</span> p1<span class="token operator">-</span><span class="token operator">></span>factor <span class="token operator">+</span> p2<span class="token operator">-</span><span class="token operator">></span>factor<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p1<span class="token operator">-</span><span class="token operator">></span>factor <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//系数和不为0</span>            <span class="token punctuation">{</span>                s<span class="token operator">=</span>p1<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>                list<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> p1<span class="token punctuation">;</span>                list <span class="token operator">=</span> p1<span class="token punctuation">;</span>                list<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>                p1 <span class="token operator">=</span> s<span class="token punctuation">;</span>                p2 <span class="token operator">=</span> p2<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>             <span class="token keyword">else</span> <span class="token comment" spellcheck="true">//系数和为0</span>            <span class="token punctuation">{</span>                p1 <span class="token operator">=</span> p1<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>                p2 <span class="token operator">=</span> p2<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            s <span class="token operator">=</span> p2<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            list<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> p2<span class="token punctuation">;</span>            list <span class="token operator">=</span> p2<span class="token punctuation">;</span>            list<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>            p2 <span class="token operator">=</span> s<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p1 <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> list<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> p1<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p2 <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> list<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> p2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输出结果</span><span class="token keyword">void</span> <span class="token function">VisitList</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">)</span><span class="token punctuation">{</span>    LinkList p<span class="token punctuation">;</span>    p <span class="token operator">=</span> L<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"0"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span>p<span class="token operator">-</span><span class="token operator">></span>factor<span class="token operator">&lt;&lt;</span><span class="token string">"X^"</span><span class="token operator">&lt;&lt;</span>p<span class="token operator">-</span><span class="token operator">></span>indice<span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            cout<span class="token operator">&lt;&lt;</span><span class="token string">"+"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    LinkList p<span class="token punctuation">,</span>q<span class="token punctuation">,</span>L<span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"please enter the number of nodes of the first polynomial:"</span><span class="token punctuation">;</span>     cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token function">CreateLink</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"enter the first polynomial:"</span><span class="token punctuation">;</span>    <span class="token function">VisitList</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"please enter the number of nodes of the second polynomial:"</span><span class="token punctuation">;</span>    cin<span class="token operator">>></span>m<span class="token punctuation">;</span>    <span class="token function">CreateLink</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"enter the second polynomial:"</span><span class="token punctuation">;</span>    <span class="token function">VisitList</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">AddList</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>q<span class="token punctuation">,</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"the output is summed: "</span><span class="token punctuation">;</span>     <span class="token function">VisitList</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://img-blog.csdnimg.cn/2020060622385182.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzIzMDk0,size_16,color_FFFFFF,t_70" alt="运行代码"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>顺序表的有序合并</title>
      <link href="/2020/06/06/shun-xu-biao-de-you-xu-he-bing/"/>
      <url>/2020/06/06/shun-xu-biao-de-you-xu-he-bing/</url>
      
        <content type="html"><![CDATA[<p>直接上代码</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span> <span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span> <span class="token macro property">#<span class="token directive keyword">define</span> OK 1</span> <span class="token macro property">#<span class="token directive keyword">define</span> ERROR 0</span> <span class="token macro property">#<span class="token directive keyword">define</span> MAXSIZE 100</span> <span class="token keyword">typedef</span> <span class="token keyword">int</span> Status<span class="token punctuation">;</span> <span class="token keyword">typedef</span> <span class="token keyword">int</span> ElemType<span class="token punctuation">;</span> <span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>     ElemType <span class="token operator">*</span>elem<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//*elem存储空间的基地址</span>     <span class="token keyword">int</span> length<span class="token punctuation">;</span> <span class="token punctuation">}</span>Sqlist<span class="token punctuation">;</span> Sqlist L<span class="token punctuation">;</span> Status <span class="token function">Initlist</span><span class="token punctuation">(</span>Sqlist <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//构造一个空的线性表</span> <span class="token punctuation">{</span>     L<span class="token punctuation">.</span>elem<span class="token operator">=</span>new ElemType<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">)</span>     <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>     L<span class="token punctuation">.</span>length<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> OK<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">int</span> <span class="token function">GetElem</span><span class="token punctuation">(</span>Sqlist L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>ElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">||</span>i<span class="token operator">></span>L<span class="token punctuation">.</span>length<span class="token punctuation">)</span>     <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>     e<span class="token operator">=</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第i-1个单元存储着第i个数据</span>     <span class="token keyword">return</span> OK<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//清空线性表</span> <span class="token keyword">int</span> <span class="token function">ClearList</span><span class="token punctuation">(</span>Sqlist <span class="token operator">&amp;</span>L<span class="token punctuation">)</span> <span class="token punctuation">{</span>     L<span class="token punctuation">.</span>length<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> OK<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//判断线性表是否为空</span><span class="token keyword">int</span> <span class="token function">IsEmpty</span><span class="token punctuation">(</span>Sqlist L<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//获取线性表的长度</span><span class="token keyword">int</span> <span class="token function">Getlength</span><span class="token punctuation">(</span>Sqlist L<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">DestoryList</span><span class="token punctuation">(</span>Sqlist <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">)</span>    delete L<span class="token punctuation">.</span>elem<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span>Status <span class="token function">locateElem</span><span class="token punctuation">(</span>Sqlist <span class="token operator">&amp;</span>L<span class="token punctuation">,</span>ElemType e <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>L<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>e<span class="token punctuation">)</span>        <span class="token keyword">return</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span><span class="token punctuation">}</span>Status <span class="token function">ListInsert</span><span class="token punctuation">(</span>Sqlist <span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>ElemType e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">||</span>i<span class="token operator">></span>L<span class="token punctuation">.</span>length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>length<span class="token operator">==</span>MAXSIZE<span class="token punctuation">)</span>    <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>L<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">;</span>j<span class="token operator">>=</span>i<span class="token number">-1</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">=</span>e<span class="token punctuation">;</span>    L<span class="token punctuation">.</span>length<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">ListDelete</span><span class="token punctuation">(</span>Sqlist <span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>i<span class="token operator">></span>L<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>L<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>     L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">=</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>     L<span class="token punctuation">.</span>length<span class="token operator">--</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">SqlistUnion</span><span class="token punctuation">(</span>Sqlist <span class="token operator">&amp;</span>La<span class="token punctuation">,</span> Sqlist <span class="token operator">&amp;</span>Lb<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> La_len <span class="token operator">=</span> <span class="token function">Getlength</span><span class="token punctuation">(</span>La<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用函数链表La的长度</span>    <span class="token keyword">int</span> Lb_len <span class="token operator">=</span> <span class="token function">Getlength</span><span class="token punctuation">(</span>Lb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用链表Lb的长度</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> Lb_len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ElemType e<span class="token punctuation">;</span>        <span class="token function">GetElem</span><span class="token punctuation">(</span>Lb<span class="token punctuation">,</span> i<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//取单链表第i个元素的内容</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">locateElem</span><span class="token punctuation">(</span>La<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">ListInsert</span><span class="token punctuation">(</span>La<span class="token punctuation">,</span> <span class="token operator">++</span>La_len<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//若是Lb中没有La以存在的元素，则将元素添加到La</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">void</span> <span class="token function">MergeList_sq</span><span class="token punctuation">(</span>Sqlist La<span class="token punctuation">,</span>Sqlist Lb<span class="token punctuation">,</span>Sqlist <span class="token operator">&amp;</span>Lc<span class="token punctuation">)</span> <span class="token punctuation">{</span>     ElemType <span class="token operator">*</span>pa<span class="token punctuation">,</span><span class="token operator">*</span>pb<span class="token punctuation">,</span><span class="token operator">*</span>pc<span class="token punctuation">,</span><span class="token operator">*</span>pa_last<span class="token punctuation">,</span><span class="token operator">*</span>pb_last<span class="token punctuation">;</span>     pa<span class="token operator">=</span>La<span class="token punctuation">.</span>elem<span class="token punctuation">;</span>     pb<span class="token operator">=</span>Lb<span class="token punctuation">.</span>elem<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指针pa,pb的初始值分别指向两个表的第一个元素</span>     Lc<span class="token punctuation">.</span>length<span class="token operator">=</span>La<span class="token punctuation">.</span>length<span class="token operator">+</span>Lb<span class="token punctuation">.</span>length<span class="token punctuation">;</span>     Lc<span class="token punctuation">.</span>elem<span class="token operator">=</span>new ElemType<span class="token punctuation">[</span>Lc<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>     pc<span class="token operator">=</span>Lc<span class="token punctuation">.</span>elem<span class="token punctuation">;</span>     pa_last<span class="token operator">=</span>La<span class="token punctuation">.</span>elem<span class="token operator">+</span>La<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//基地址加上长度-1等到的是最后一个元素地址</span>     pb_last<span class="token operator">=</span>Lb<span class="token punctuation">.</span>elem<span class="token operator">+</span>Lb<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指针pb_last指向Lb表的最后一个元素</span>      <span class="token keyword">while</span><span class="token punctuation">(</span>pa<span class="token operator">&lt;=</span>pa_last<span class="token operator">&amp;&amp;</span>pb<span class="token operator">&lt;=</span>pb_last<span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>pa<span class="token operator">&lt;=</span><span class="token operator">*</span>pb<span class="token punctuation">)</span>          <span class="token operator">*</span>pc<span class="token operator">++</span><span class="token operator">=</span><span class="token operator">*</span>pa<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token keyword">else</span>          <span class="token punctuation">{</span>              <span class="token operator">*</span>pc<span class="token operator">++</span><span class="token operator">=</span><span class="token operator">*</span>pb<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>     <span class="token keyword">while</span><span class="token punctuation">(</span>pa<span class="token operator">&lt;=</span>pa_last<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//LB到达表尾，将La中的剩余元素加入Lc</span>     <span class="token operator">*</span>pc<span class="token operator">++</span><span class="token operator">=</span><span class="token operator">*</span>pa<span class="token operator">++</span><span class="token punctuation">;</span>     <span class="token keyword">while</span><span class="token punctuation">(</span>pb<span class="token operator">&lt;=</span>pb_last<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//LA到达表尾，将Lb中的剩余元素加入Lc</span>     <span class="token operator">*</span>pc<span class="token operator">++</span><span class="token operator">=</span><span class="token operator">*</span>pb<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//遍历</span><span class="token keyword">void</span> <span class="token function">ListTraversals</span><span class="token punctuation">(</span>Sqlist L<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> L<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//主函数测试</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> ret<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>        ElemType e<span class="token punctuation">;</span>        Sqlist La<span class="token punctuation">,</span>Lb<span class="token punctuation">,</span>Lc<span class="token punctuation">;</span>        ret<span class="token operator">=</span><span class="token function">Initlist</span><span class="token punctuation">(</span>La<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化链表A</span>        ret<span class="token operator">=</span><span class="token function">Initlist</span><span class="token punctuation">(</span>Lb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化链表B</span>        ret<span class="token operator">=</span><span class="token function">Initlist</span><span class="token punctuation">(</span>Lc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//     插入线性表LA</span>        ret <span class="token operator">=</span> <span class="token function">ListInsert</span><span class="token punctuation">(</span>La<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ret <span class="token operator">=</span> <span class="token function">ListInsert</span><span class="token punctuation">(</span>La<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ret <span class="token operator">=</span> <span class="token function">ListInsert</span><span class="token punctuation">(</span>La<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"LA:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">ListTraversals</span><span class="token punctuation">(</span>La<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//     //插入线性表LB</span>         ret <span class="token operator">=</span> <span class="token function">ListInsert</span><span class="token punctuation">(</span>Lb<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         ret <span class="token operator">=</span> <span class="token function">ListInsert</span><span class="token punctuation">(</span>Lb<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         ret <span class="token operator">=</span> <span class="token function">ListInsert</span><span class="token punctuation">(</span>Lb<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         ret <span class="token operator">=</span> <span class="token function">ListInsert</span><span class="token punctuation">(</span>Lb<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         ret <span class="token operator">=</span> <span class="token function">ListInsert</span><span class="token punctuation">(</span>Lb<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         ret <span class="token operator">=</span> <span class="token function">ListInsert</span><span class="token punctuation">(</span>Lb<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"LB:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">ListTraversals</span><span class="token punctuation">(</span>Lb<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"LC:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">MergeList_sq</span><span class="token punctuation">(</span>La<span class="token punctuation">,</span> Lb<span class="token punctuation">,</span> Lc<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">ListTraversals</span><span class="token punctuation">(</span>Lc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200606222919567.png" alt="运行结果"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单链表的实现</title>
      <link href="/2020/06/06/dan-lian-biao-de-shi-xian/"/>
      <url>/2020/06/06/dan-lian-biao-de-shi-xian/</url>
      
        <content type="html"><![CDATA[<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> OK 1</span><span class="token macro property">#<span class="token directive keyword">define</span> ERROR 0</span><span class="token macro property">#<span class="token directive keyword">define</span> F -1</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> ElemType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> Status<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> Lnode<span class="token comment" spellcheck="true">//单链表的定义</span><span class="token punctuation">{</span>    ElemType data<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数据域</span>    <span class="token keyword">struct</span> Lnode <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指针域</span><span class="token punctuation">}</span>Lnode<span class="token punctuation">,</span><span class="token operator">*</span>linkList<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//linklist为指向结构体Lode的指针类型</span>linkList L<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义链表L</span><span class="token comment" spellcheck="true">//初始化链表</span>Status <span class="token function">InitList</span><span class="token punctuation">(</span>linkList <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//要改变链表的形状，所以用引用类型</span><span class="token punctuation">{</span>    L<span class="token operator">=</span>new Lnode<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//生成一个新结点,用头指针指向头结点</span>    L<span class="token operator">-></span>next<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将新结点的指针域置空</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//判断链表为空</span><span class="token keyword">int</span> <span class="token function">ListEmpty</span><span class="token punctuation">(</span>linkList L<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//非空，则不是空链表，返回ERROR</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//销毁单链表</span><span class="token keyword">int</span> <span class="token function">DestoryList</span><span class="token punctuation">(</span>linkList <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>    Lnode <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//当链表不为空时，一直释放结点</span>    <span class="token punctuation">{</span>        p<span class="token operator">=</span>L<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将p指向头结点，而头指针存放头结点的地址</span>        L<span class="token operator">=</span>L<span class="token operator">-></span>next<span class="token punctuation">;</span>        delete p<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//清空链表</span><span class="token comment" spellcheck="true">//链表仍存在，但链表中无元素，成为空链表（头指针和头结点依旧在）</span><span class="token comment" spellcheck="true">//算法思路</span><span class="token comment" spellcheck="true">//依次释放所有结点，并将头指针结点置为空</span>Status <span class="token function">clearList</span><span class="token punctuation">(</span>linkList <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>     linkList p<span class="token punctuation">,</span>q<span class="token punctuation">;</span>    p<span class="token operator">=</span>L<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使p指向首元结点 </span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//当p指向的结点为NULL时，结束循环 </span>    <span class="token punctuation">{</span>        q<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>        delete p<span class="token punctuation">;</span>        p<span class="token operator">=</span>q<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    L<span class="token operator">-></span>next<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//返回单链表的长度</span><span class="token keyword">int</span> <span class="token function">ListLength</span><span class="token punctuation">(</span>linkList L<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//返回L中数据元素的个数</span><span class="token punctuation">{</span>    Lnode <span class="token operator">*</span>p<span class="token punctuation">;</span>    p<span class="token operator">=</span>L<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//p指向首元结点</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//当p为空时，循环结束</span>    <span class="token punctuation">{</span>        i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录结点的个数</span>        p<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指向下一个结点</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//取单链表第i个元素的内容</span><span class="token keyword">int</span> <span class="token function">GetElem</span><span class="token punctuation">(</span>linkList L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>ElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    Lnode <span class="token operator">*</span>p<span class="token punctuation">;</span>    p<span class="token operator">=</span>L<span class="token operator">-></span>next<span class="token punctuation">;</span> <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">&amp;&amp;</span>j<span class="token operator">&lt;</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        p<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>        j<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token operator">&amp;&amp;</span>j<span class="token operator">></span>i<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//j>i,i的值可能是负数或者是0，j>i用来判断i的值是否具有有效性</span>    <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    e<span class="token operator">=</span>p<span class="token operator">-></span>data<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//按值查找，根据指定数据的值查找它的位置信号</span><span class="token keyword">int</span> <span class="token function">LocateElem</span><span class="token punctuation">(</span>linkList L<span class="token punctuation">,</span>ElemType e<span class="token punctuation">)</span><span class="token punctuation">{</span>    Lnode <span class="token operator">*</span>p<span class="token punctuation">;</span>    p<span class="token operator">=</span>L<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">&amp;&amp;</span>p<span class="token operator">-></span>data<span class="token operator">!=</span>e<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        p<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>        j<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>    <span class="token keyword">return</span> j<span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token keyword">return</span> F<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//插入，在第i个结点，插入值为e的结点</span><span class="token comment" spellcheck="true">//算法思路</span><span class="token comment" spellcheck="true">//首先找到i-1的存储位置p</span><span class="token comment" spellcheck="true">//生成一个数据域为e的新结点s</span><span class="token comment" spellcheck="true">//插入新结点，新节点的指针域指向i,结点i-1的指针域指向新节点</span>Status <span class="token function">ListInsert</span><span class="token punctuation">(</span>linkList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>ElemType e<span class="token punctuation">)</span><span class="token punctuation">{</span>    Lnode <span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token operator">*</span>s<span class="token punctuation">;</span>    p<span class="token operator">=</span>L<span class="token punctuation">;</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">&amp;&amp;</span>j<span class="token operator">&lt;</span>i<span class="token number">-1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//寻找第i-1个结点，p指向第i-1个结点</span>    <span class="token punctuation">{</span>        p<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>        j<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token operator">||</span>j<span class="token operator">></span>i<span class="token number">-1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//i大于表长+1或者小于1，插入位置非法</span>    <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    s<span class="token operator">=</span>new Lnode<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//生成新结点</span>    s<span class="token operator">-></span>data<span class="token operator">=</span>e<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将结点s的数据与置为e</span>    s<span class="token operator">-></span>next<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>    p<span class="token operator">-></span>next<span class="token operator">=</span>s<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//单链表的删除，删除第i个结点</span>Status <span class="token function">ListDelete</span><span class="token punctuation">(</span>linkList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>ElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    Lnode <span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token operator">*</span>q<span class="token punctuation">;</span>    p<span class="token operator">=</span>L<span class="token punctuation">;</span> <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">-></span>next<span class="token operator">&amp;&amp;</span>j<span class="token operator">&lt;</span>i<span class="token number">-1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//可以找到第i-1的数据元素，p指向i-1,p->next指向i,即i必须存在</span>   <span class="token punctuation">{</span>       p<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>       j<span class="token operator">++</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>p<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token operator">||</span>j<span class="token operator">></span>i<span class="token number">-1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//删除位置不合理</span>   <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>   q<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//临时保存被删节点的地址以备释放</span>   p<span class="token operator">-></span>next<span class="token operator">=</span>q<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//改变删除结点前驱结点的指针域</span>   e<span class="token operator">=</span>q<span class="token operator">-></span>data<span class="token punctuation">;</span>   delete p<span class="token punctuation">;</span>   <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//尾插法</span><span class="token keyword">int</span> <span class="token function">CreateList</span><span class="token punctuation">(</span>linkList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    L<span class="token operator">=</span>new Lnode<span class="token punctuation">;</span>    L<span class="token operator">-></span>next<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    Lnode <span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token operator">*</span>r<span class="token punctuation">;</span>    r<span class="token operator">=</span>L<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//尾指针指向头结点</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        p<span class="token operator">=</span>new Lnode<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//生成新结点</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>p<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输入元素的值</span>        p<span class="token operator">-></span>next<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>        r<span class="token operator">-></span>next<span class="token operator">=</span>p<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将结点插入到表尾</span>        r<span class="token operator">=</span>p<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//r指向新的尾结点</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//主函数测试</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ElemType e<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//测试InitList函数</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">InitList</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"InitList success!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"InitList error\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//测试listEmpty函数</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">ListEmpty</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ListEmpty success!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ListEmpty error\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//测试Creatlist函数</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"please enter the number:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">CreateList</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Createlist success\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//测试listlength函数</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Linklist length is %d\n"</span><span class="token punctuation">,</span><span class="token function">ListLength</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//测试Getelem函数</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">GetElem</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the first element is %d\n"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the first element is not exist\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//测试locateElem_L函数</span>    <span class="token keyword">int</span> a2<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"please enter the number of you want to find it,if success,return a position sequence for the element\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> f<span class="token operator">=</span><span class="token function">LocateElem</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>a2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d is located at the %d\n"</span><span class="token punctuation">,</span>a2<span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d is not located at the Linklist\n"</span><span class="token punctuation">,</span>a2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//测试listInsert函数</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"please enter the insertion element position sequence number and the value of the number\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c<span class="token punctuation">,</span>a<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">ListInsert</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>c<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"listInsert success!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//测试listDelete函数</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"please enter the location number of the element you want to delete\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> d<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">ListDelete</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>d<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" the deleted element is %d\n"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Delete error\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//测试clearlist函数</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">clearList</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"clearList success\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"clearlist error\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//测试DestoryList函数</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">DestoryList</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"DestoryList success\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Destorylist error\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链队</title>
      <link href="/2020/06/05/lian-dui/"/>
      <url>/2020/06/05/lian-dui/</url>
      
        <content type="html"><![CDATA[<p>参考教材为严蔚敏版，语言为C语言</p><p>直接上代码</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> TRUE    1</span><span class="token macro property">#<span class="token directive keyword">define</span> FALSE   0</span><span class="token macro property">#<span class="token directive keyword">define</span> OK      1</span><span class="token macro property">#<span class="token directive keyword">define</span> ERROR   0</span><span class="token macro property">#<span class="token directive keyword">define</span> INFEASIBLE -1</span><span class="token macro property">#<span class="token directive keyword">define</span> OVERFLOW   -2</span><span class="token macro property">#<span class="token directive keyword">define</span> MAXSIZE    100</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> QElemType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> Status<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> Qnode<span class="token punctuation">{</span>    QElemType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> Qnode <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数据域</span><span class="token punctuation">}</span>QNode<span class="token punctuation">,</span><span class="token operator">*</span>QueuePtr<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    QueuePtr front<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//头指针</span>    QueuePtr rear<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//尾指针</span><span class="token punctuation">}</span>LinkQueue<span class="token punctuation">;</span>Status <span class="token function">InitQueue</span><span class="token punctuation">(</span>LinkQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">)</span><span class="token punctuation">{</span>    Q<span class="token punctuation">.</span>front<span class="token operator">=</span>Q<span class="token punctuation">.</span>rear<span class="token operator">=</span><span class="token punctuation">(</span>QueuePtr<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Qnode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>Q<span class="token punctuation">.</span>front<span class="token punctuation">)</span>    <span class="token function">exit</span><span class="token punctuation">(</span>OVERFLOW<span class="token punctuation">)</span><span class="token punctuation">;</span>    Q<span class="token punctuation">.</span>front<span class="token operator">-></span>next<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span>Status <span class="token function">DestoryQueue</span><span class="token punctuation">(</span>LinkQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">)</span><span class="token punctuation">{</span>    QNode <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>front<span class="token punctuation">)</span>   <span class="token punctuation">{</span>    p<span class="token operator">=</span>Q<span class="token punctuation">.</span>front<span class="token operator">-></span>next<span class="token punctuation">;</span>    delete Q<span class="token punctuation">.</span>front<span class="token punctuation">;</span>    Q<span class="token punctuation">.</span>front<span class="token operator">=</span>p<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span>Status <span class="token function">EnQueue</span><span class="token punctuation">(</span>LinkQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">,</span>QElemType e<span class="token punctuation">)</span><span class="token punctuation">{</span>    QNode <span class="token operator">*</span>p<span class="token punctuation">;</span>    p<span class="token operator">=</span><span class="token punctuation">(</span>QueuePtr<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Qnode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span>    <span class="token function">exit</span><span class="token punctuation">(</span>OVERFLOW<span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token operator">-></span>data<span class="token operator">=</span>e<span class="token punctuation">;</span>    p<span class="token operator">-></span>next<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    Q<span class="token punctuation">.</span>rear<span class="token operator">-></span>next<span class="token operator">=</span>p<span class="token punctuation">;</span>    Q<span class="token punctuation">.</span>rear<span class="token operator">=</span>p<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//元素e出队</span>Status <span class="token function">DeQueue</span><span class="token punctuation">(</span>LinkQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">,</span>QElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    QNode <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>front<span class="token operator">==</span>Q<span class="token punctuation">.</span>rear<span class="token punctuation">)</span>    <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    p<span class="token operator">=</span>Q<span class="token punctuation">.</span>front<span class="token operator">-></span>next<span class="token punctuation">;</span>    e<span class="token operator">=</span>p<span class="token operator">-></span>data<span class="token punctuation">;</span>    Q<span class="token punctuation">.</span>front<span class="token operator">-></span>next<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>rear<span class="token operator">==</span>p<span class="token punctuation">)</span>    Q<span class="token punctuation">.</span>rear<span class="token operator">=</span>Q<span class="token punctuation">.</span>front<span class="token punctuation">;</span>    delete p<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//链队的队头元素</span>Status <span class="token function">Gethead</span><span class="token punctuation">(</span>LinkQueue Q<span class="token punctuation">,</span>QElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>front<span class="token operator">==</span>Q<span class="token punctuation">.</span>rear<span class="token punctuation">)</span>    <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    e<span class="token operator">=</span>Q<span class="token punctuation">.</span>front<span class="token operator">-></span>next<span class="token operator">-></span>data<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">QueueLength</span><span class="token punctuation">(</span>LinkQueue Q<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>front<span class="token operator">==</span>Q<span class="token punctuation">.</span>rear<span class="token punctuation">)</span>    <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    QNode <span class="token operator">*</span>p<span class="token punctuation">;</span>    p<span class="token operator">=</span>Q<span class="token punctuation">.</span>front<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">int</span> length<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        length<span class="token operator">++</span><span class="token punctuation">;</span>        p<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> length<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//遍历链表</span>Status <span class="token function">TraverseQueue</span><span class="token punctuation">(</span>LinkQueue Q<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>front<span class="token operator">==</span>Q<span class="token punctuation">.</span>rear<span class="token punctuation">)</span>    <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    QNode <span class="token operator">*</span>p<span class="token punctuation">;</span>    p<span class="token operator">=</span>Q<span class="token punctuation">.</span>front<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>p<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//清空链队</span>Status <span class="token function">clearQueue</span><span class="token punctuation">(</span>LinkQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">)</span><span class="token punctuation">{</span>    QNode <span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token operator">*</span>q<span class="token punctuation">;</span>    p<span class="token operator">=</span>Q<span class="token punctuation">.</span>front<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>front<span class="token operator">=</span>Q<span class="token punctuation">.</span>rear<span class="token punctuation">)</span>    <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        q<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>        delete p<span class="token punctuation">;</span>        p<span class="token operator">=</span>q<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Q<span class="token punctuation">.</span>front<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    Q<span class="token punctuation">.</span>rear<span class="token operator">=</span>Q<span class="token punctuation">.</span>front<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    LinkQueue Q<span class="token punctuation">;</span>    QElemType e<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">InitQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Initstack success\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//执行入栈操作</span>    e<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">;</span>    <span class="token function">EnQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    e<span class="token operator">=</span><span class="token number">22</span><span class="token punctuation">;</span>    <span class="token function">EnQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    e<span class="token operator">=</span><span class="token number">33</span><span class="token punctuation">;</span>    <span class="token function">EnQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the length of the queue is %d\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token function">QueueLength</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">Gethead</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the Gethead element is %d\n"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">DeQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the delete of the element is %d\n"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">TraverseQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">clearQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"clear success!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">DestoryQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"destoryQueue success!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre><code></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>循环队列</title>
      <link href="/2020/06/03/xun-huan-dui-lie/"/>
      <url>/2020/06/03/xun-huan-dui-lie/</url>
      
        <content type="html"><![CDATA[<p>直接上代码<br>实现语言为C语言</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> TRUE    1</span><span class="token macro property">#<span class="token directive keyword">define</span> FALSE   0</span><span class="token macro property">#<span class="token directive keyword">define</span> OK      1</span><span class="token macro property">#<span class="token directive keyword">define</span> ERROR   0</span><span class="token macro property">#<span class="token directive keyword">define</span> INFEASIBLE -1</span><span class="token macro property">#<span class="token directive keyword">define</span> OVERFLOW   -2</span><span class="token macro property">#<span class="token directive keyword">define</span> MAXSIZE    100</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> QElemType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> Status<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    QElemType <span class="token operator">*</span>base<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化的动态分配内存空间</span>    <span class="token keyword">int</span> Front<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//头指针</span>    <span class="token keyword">int</span> Rear<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//尾指针</span><span class="token punctuation">}</span>SqQueue<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 构造空队列</span>Status <span class="token function">InitQueue</span><span class="token punctuation">(</span>SqQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">)</span><span class="token punctuation">{</span>    Q<span class="token punctuation">.</span>base <span class="token operator">=</span> new QElemType<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 分配数组空间</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Q<span class="token punctuation">.</span>base<span class="token punctuation">)</span>     <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    Q<span class="token punctuation">.</span>Front <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 头指针 尾指针为0, 队列为空</span>    Q<span class="token punctuation">.</span>Rear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 销毁队列</span>Status <span class="token function">DestroyQueue</span><span class="token punctuation">(</span>SqQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Q<span class="token punctuation">.</span>base<span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    delete Q<span class="token punctuation">.</span>base<span class="token punctuation">;</span>    Q<span class="token punctuation">.</span>base <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 清空队列</span>Status <span class="token function">ClearQueue</span><span class="token punctuation">(</span>SqQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Q<span class="token punctuation">.</span>Front <span class="token operator">==</span> Q<span class="token punctuation">.</span>Rear<span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 已经是空表</span>    Q<span class="token punctuation">.</span>Rear <span class="token operator">=</span> Q<span class="token punctuation">.</span>Front<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 求队列长度</span><span class="token keyword">int</span> <span class="token function">QueueLength</span><span class="token punctuation">(</span>SqQueue Q<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>Rear<span class="token operator">-</span>Q<span class="token punctuation">.</span>Front<span class="token operator">+</span>MAXSIZE<span class="token punctuation">)</span><span class="token operator">%</span>MAXSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 用e返回Q的队头元素</span>Status <span class="token function">GetHead</span><span class="token punctuation">(</span>SqQueue Q<span class="token punctuation">,</span> QElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Q<span class="token punctuation">.</span>Front <span class="token operator">==</span> Q<span class="token punctuation">.</span>Rear<span class="token punctuation">)</span>        <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 队不能为空</span>    e <span class="token operator">=</span> Q<span class="token punctuation">.</span>base<span class="token punctuation">[</span>Q<span class="token punctuation">.</span>Front<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 返回队头指针元素, 队头指针不变</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 插入元素e为Q的队尾元素(入队)</span>Status <span class="token function">EnQueue</span><span class="token punctuation">(</span>SqQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">,</span> QElemType e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>Rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>MAXSIZE <span class="token operator">==</span> Q<span class="token punctuation">.</span>Front<span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 队满</span>    Q<span class="token punctuation">.</span>base<span class="token punctuation">[</span>Q<span class="token punctuation">.</span>Rear<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 新元素加入队尾</span>    Q<span class="token punctuation">.</span>Rear <span class="token operator">=</span> <span class="token punctuation">(</span>Q<span class="token punctuation">.</span>Rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>MAXSIZE<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 队尾指针+1</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 删除Q的队头元素，用e返回(出队)</span>Status <span class="token function">DeQueue</span><span class="token punctuation">(</span>SqQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">,</span> QElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Q<span class="token punctuation">.</span>Rear <span class="token operator">==</span> Q<span class="token punctuation">.</span>Front<span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 队空</span>    e <span class="token operator">=</span> Q<span class="token punctuation">.</span>base<span class="token punctuation">[</span>Q<span class="token punctuation">.</span>Front<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 保存队头元素</span>    Q<span class="token punctuation">.</span>Front <span class="token operator">=</span> <span class="token punctuation">(</span>Q<span class="token punctuation">.</span>Front<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>MAXSIZE<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 队头指针+1</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 遍历队列</span>Status <span class="token function">TraverseQueue</span><span class="token punctuation">(</span>SqQueue Q<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Q<span class="token punctuation">.</span>Front <span class="token operator">==</span> Q<span class="token punctuation">.</span>Rear<span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> Q<span class="token punctuation">.</span>Front<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">&lt;</span> Q<span class="token punctuation">.</span>Rear<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>Q<span class="token punctuation">.</span>base<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        temp<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    SqQueue Q<span class="token punctuation">;</span>    QElemType e<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">InitQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Initstack success\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//执行入栈操作</span>    e<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">;</span>    <span class="token function">EnQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    e<span class="token operator">=</span><span class="token number">22</span><span class="token punctuation">;</span>    <span class="token function">EnQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    e<span class="token operator">=</span><span class="token number">33</span><span class="token punctuation">;</span>    <span class="token function">EnQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the length of the queue is %d\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token function">QueueLength</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">GetHead</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the Gethead element is %d\n"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">DeQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the delete of the element is %d\n"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">TraverseQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">ClearQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"clear success!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">DestroyQueue</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"destoryQueue success!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两数反转</title>
      <link href="/2020/05/30/liang-shu-fan-zhuan/"/>
      <url>/2020/05/30/liang-shu-fan-zhuan/</url>
      
        <content type="html"><![CDATA[<p>题目描述</p><p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</p><p>示例 1:</p><p>输入: 123<br>输出: 321<br> 示例 2:</p><p>输入: -123<br>输出: -321<br>示例 3:</p><p>输入: 120<br>输出: 21<br>注意:</p><p>假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231,  231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/reverse-integer" target="_blank" rel="noopener">https://leetcode-cn.com/problems/reverse-integer</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><p>`#include&lt;stdio.h&gt;`</p><p><code>int reverse(int x){</code></p><p>  <code>int digit=0;</code></p><p>  <code>int ret=0;</code></p><p>  <code>int flag;</code></p><p>  <code>flag=1;</code></p><p>  <code>if(x&lt;0)</code></p><p>  <code>{</code></p><p>​    <code>flag=-1;</code></p><p>​    <code>x=-x;</code></p><p>  <code>}</code></p><p>  <code>while(x&gt;0)</code></p><p>  <code>{</code></p><p>​    <code>digit=x%10;//得到最后一位数</code></p><p>​    <code>ret=ret*10+digit;</code></p><p>​    <code>x=x/10;</code></p><p>  <code>}</code></p><p>  <code>return flag*ret;</code></p><p><code>}</code></p><p><code>int main()</code></p><p><code>{</code></p><p>  <code>int x;</code></p><p> <code>// scanf("%d,&amp;x");</code></p><p>  <code>x=123;</code></p><p>  <code>int ret;</code></p><p>  <code>ret=0;</code></p><p>  <code>ret=reverse(x);</code></p><p>`` </p><p>  <code>printf("%d",ret);</code></p><p>  <code>return 0;</code></p><p><code>}</code></p><p>vscode上能运行出来，但是总归是不够完善</p><p>leetcode代码提交出现越界问题</p><p>下面参照别人的代码</p><p><code>int reverse(int x){</code></p><p>  <code>long temp,result=0;</code></p><p>  <code>if(x&gt;1534236461)</code> </p><p>  <code>return 0;</code></p><p>  <code>while(x){</code></p><p>​    <code>temp=x%10;</code></p><p>​    <code>x=x/10;</code></p><p>​    <code>result=result*10+temp;</code></p><p>  <code>}</code></p><p>  <code>if(result&gt;2147483642||result&lt;(-2147483641)) return 0;</code></p><p>  <code>return result;</code></p><p><code>}</code></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>顺序表</title>
      <link href="/2020/05/30/shun-xu-biao/"/>
      <url>/2020/05/30/shun-xu-biao/</url>
      
        <content type="html"><![CDATA[<p>实现代码为C语言，教材为清华大学严蔚敏版。</p><pre class=" language-c"><code class="language-c"> <span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span> <span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span> <span class="token macro property">#<span class="token directive keyword">define</span> OK 1</span> <span class="token macro property">#<span class="token directive keyword">define</span> ERROR 0</span> <span class="token macro property">#<span class="token directive keyword">define</span> MAXSIZE 100</span> <span class="token keyword">typedef</span> <span class="token keyword">int</span> Status<span class="token punctuation">;</span> <span class="token keyword">typedef</span> <span class="token keyword">int</span> ElemType<span class="token punctuation">;</span> <span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>     ElemType <span class="token operator">*</span>elem<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//*elem存储空间的基地址</span>     <span class="token keyword">int</span> length<span class="token punctuation">;</span> <span class="token punctuation">}</span>Sqlist<span class="token punctuation">;</span> Sqlist L<span class="token punctuation">;</span> Status <span class="token function">Initlist</span><span class="token punctuation">(</span>Sqlist <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//构造一个空的线性表</span> <span class="token punctuation">{</span>     L<span class="token punctuation">.</span>elem<span class="token operator">=</span>new ElemType<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">)</span>     <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>     L<span class="token punctuation">.</span>length<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> OK<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">int</span> <span class="token function">GetElem</span><span class="token punctuation">(</span>Sqlist L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>ElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">||</span>i<span class="token operator">></span>L<span class="token punctuation">.</span>length<span class="token punctuation">)</span>     <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>     e<span class="token operator">=</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第i-1个单元存储着第i个数据</span>     <span class="token keyword">return</span> OK<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//清空线性表</span> <span class="token keyword">int</span> <span class="token function">ClearList</span><span class="token punctuation">(</span>Sqlist <span class="token operator">&amp;</span>L<span class="token punctuation">)</span> <span class="token punctuation">{</span>     L<span class="token punctuation">.</span>length<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> OK<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//判断线性表是否为空</span><span class="token keyword">int</span> <span class="token function">IsEmpty</span><span class="token punctuation">(</span>Sqlist L<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//获取线性表的长度</span><span class="token keyword">int</span> <span class="token function">Getlength</span><span class="token punctuation">(</span>Sqlist L<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">DestoryList</span><span class="token punctuation">(</span>Sqlist <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">)</span>    delete L<span class="token punctuation">.</span>elem<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span>Status <span class="token function">locateElem</span><span class="token punctuation">(</span>Sqlist <span class="token operator">&amp;</span>L<span class="token punctuation">,</span>ElemType e <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>L<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>e<span class="token punctuation">)</span>        <span class="token keyword">return</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span><span class="token punctuation">}</span>Status <span class="token function">ListInsert</span><span class="token punctuation">(</span>Sqlist <span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>ElemType e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">||</span>i<span class="token operator">></span>L<span class="token punctuation">.</span>length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>length<span class="token operator">==</span>MAXSIZE<span class="token punctuation">)</span>    <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>L<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">;</span>j<span class="token operator">>=</span>i<span class="token number">-1</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">=</span>e<span class="token punctuation">;</span>    L<span class="token punctuation">.</span>length<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">ListDelete</span><span class="token punctuation">(</span>Sqlist <span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>i<span class="token operator">></span>L<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>L<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>     L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">=</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>     L<span class="token punctuation">.</span>length<span class="token operator">--</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//主函数测试</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">Initlist</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Initlist success!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>        ElemType e<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">ListInsert</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//测试InsertList函数</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Length is %d\n"</span><span class="token punctuation">,</span><span class="token function">Getlength</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">GetElem</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the first element %d\n"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"element is not exist\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">locateElem</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the element is locate at %d\n"</span><span class="token punctuation">,</span><span class="token function">locateElem</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the element is not exist"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">ListDelete</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"delect ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"List is empty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"list is not empty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">DestoryList</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"destory success\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">ClearList</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"clear success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
